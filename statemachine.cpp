#include "statemachine.h"
#include <cstdlib>
#include <vector>
#include <iostream>
#include <string>
#include <stdio.h>

StateMachine::StateMachine()
{
	for (int i = 0; i<LAST_STATE; i++)
	{
		for (int j = 0; j<LAST_CHAR; j++)
		{
			mLegalMoves[i][j] = CANTMOVE_STATE;
		}
	}
	mCurrentState = START_STATE;
	mLegalMoves[START_STATE][DIGIT_CHAR] = INTEGER_STATE;
	mLegalMoves[START_STATE][LETTER_CHAR] = IDENTIFIER_STATE;
	mLegalMoves[START_STATE][UNDER_CHAR] = IDENTIFIER_STATE;
	mLegalMoves[LESS_STATE][EQUAL_CHAR] = LESSEQUAL_STATE;
	mLegalMoves[GREATER_STATE][EQUAL_CHAR] = GREATEREQUAL_STATE;
	mLegalMoves[LESS_STATE][LESS_CHAR] = INSERTION_STATE;
	mLegalMoves[IDENTIFIER_STATE][LETTER_CHAR] = IDENTIFIER_STATE;
	mLegalMoves[INTEGER_STATE][DIGIT_CHAR] = INTEGER_STATE;
	mLegalMoves[NOT_STATE][EQUAL_CHAR] = NOTEQUAL_STATE;
	mLegalMoves[START_STATE][ENDFILE_CHAR] = ENDFILE_STATE;
	mLegalMoves[ASSIGNMENT_STATE][EQUAL_CHAR] = EQUAL_STATE;
	mLegalMoves[MINUS_STATE][EQUAL_CHAR] = MINUSEQUAL_STATE;
	mLegalMoves[MINUS_STATE][MINUS_CHAR] = DEC_STATE;
	mLegalMoves[DIVIDE_STATE][EQUAL_CHAR] = DIVIDEEQUAL_STATE;
	mLegalMoves[TIMES_STATE][EQUAL_CHAR] = TIMESEQUAL_STATE;
	mLegalMoves[PLUS_STATE][EQUAL_CHAR] = PLUSEQUAL_STATE;
	mLegalMoves[PLUS_STATE][PLUS_CHAR] = INC_STATE;
	//spinning states, start, block, comment
	mLegalMoves[START_STATE][LPAREN_CHAR] = LPAREN_STATE;
	mLegalMoves[START_STATE][RPAREN_CHAR] = RPAREN_STATE;
	mLegalMoves[START_STATE][RCURLY_CHAR] = RCURLY_STATE;
	mLegalMoves[START_STATE][LCURLY_CHAR] = LCURLY_STATE;
	mLegalMoves[START_STATE][PLUS_CHAR] = PLUS_STATE;
	mLegalMoves[START_STATE][MINUS_CHAR] = MINUS_STATE;
	mLegalMoves[START_STATE][DIVIDE_CHAR] = DIVIDE_STATE;
	mLegalMoves[START_STATE][MODULUS_CHAR] = MODULUS_STATE;
	mLegalMoves[START_STATE][TIMES_CHAR] = TIMES_STATE;
	mLegalMoves[START_STATE][LESS_CHAR] = LESS_STATE;
	mLegalMoves[START_STATE][GREATER_CHAR] = GREATER_STATE;
	mLegalMoves[START_STATE][WHITESPACE_CHAR] = START_STATE;
	mLegalMoves[START_STATE][NEWLINE_CHAR] = START_STATE;
	mLegalMoves[START_STATE][EQUAL_CHAR] = ASSIGNMENT_STATE;
	mLegalMoves[START_STATE][SEMICOLON_CHAR] = SEMICOLON_STATE;
	mLegalMoves[START_STATE][EXCLAMATION_CHAR] = NOT_STATE;
	mLegalMoves[START_STATE][AMP_CHAR] = AMP_STATE;
	mLegalMoves[START_STATE][PIPE_CHAR] = PIPE_STATE;
	mLegalMoves[START_STATE][EXPONENT_CHAR] = EXPONENT_STATE;



	mLegalMoves[START_STATE][STRING_CHAR] = STRING_STATE;
	mLegalMoves[STRING_STATE][LETTER_CHAR] = STRING_STATE;
	mLegalMoves[STRING_STATE][DIGIT_CHAR] = STRING_STATE;
	mLegalMoves[STRING_STATE][WHITESPACE_CHAR] = STRING_STATE;
	mLegalMoves[STRING_STATE][LESS_CHAR] = STRING_STATE;
	mLegalMoves[STRING_STATE][EQUAL_CHAR] = STRING_STATE;
	mLegalMoves[STRING_STATE][GREATER_CHAR] = STRING_STATE;
	mLegalMoves[STRING_STATE][PLUS_CHAR] = STRING_STATE;
	mLegalMoves[STRING_STATE][MINUS_CHAR] = STRING_STATE;
	mLegalMoves[STRING_STATE][DIVIDE_CHAR] = STRING_STATE;
	mLegalMoves[STRING_STATE][SEMICOLON_CHAR] = STRING_STATE;
	mLegalMoves[STRING_STATE][LPAREN_CHAR] = STRING_STATE;
	mLegalMoves[STRING_STATE][RPAREN_CHAR] = STRING_STATE;
	mLegalMoves[STRING_STATE][LCURLY_CHAR] = STRING_STATE;
	mLegalMoves[STRING_STATE][RCURLY_CHAR] = STRING_STATE;
	mLegalMoves[STRING_STATE][EXCLAMATION_CHAR] = STRING_STATE;
	mLegalMoves[STRING_STATE][NEWLINE_CHAR] = STRING_STATE;
	mLegalMoves[STRING_STATE][TIMES_CHAR] = STRING_STATE;
	mLegalMoves[STRING_STATE][DIVIDE_CHAR] = STRING_STATE;
	mLegalMoves[STRING_STATE][STRING_CHAR] = START_STATE;
	mLegalMoves[STRING_STATE][EXPONENT_CHAR] = STRING_STATE;


	mLegalMoves[AMP_STATE][AMP_CHAR] = AND_STATE;
	mLegalMoves[PIPE_STATE][PIPE_CHAR] = OR_STATE;

	mLegalMoves[DIVIDE_STATE][TIMES_CHAR] = BLOCKCOMMENT_STATE;
	mLegalMoves[BLOCKCOMMENT_STATE][LETTER_CHAR] = BLOCKCOMMENT_STATE;
	mLegalMoves[BLOCKCOMMENT_STATE][DIGIT_CHAR] = BLOCKCOMMENT_STATE;
	mLegalMoves[BLOCKCOMMENT_STATE][WHITESPACE_CHAR] = BLOCKCOMMENT_STATE;
	mLegalMoves[BLOCKCOMMENT_STATE][LESS_CHAR] = BLOCKCOMMENT_STATE;
	mLegalMoves[BLOCKCOMMENT_STATE][EQUAL_CHAR] = BLOCKCOMMENT_STATE;
	mLegalMoves[BLOCKCOMMENT_STATE][GREATER_CHAR] = BLOCKCOMMENT_STATE;
	mLegalMoves[BLOCKCOMMENT_STATE][PLUS_CHAR] = BLOCKCOMMENT_STATE;
	mLegalMoves[BLOCKCOMMENT_STATE][MINUS_CHAR] = BLOCKCOMMENT_STATE;
	mLegalMoves[BLOCKCOMMENT_STATE][DIVIDE_CHAR] = BLOCKCOMMENT_STATE;
	mLegalMoves[BLOCKCOMMENT_STATE][SEMICOLON_CHAR] = BLOCKCOMMENT_STATE;
	mLegalMoves[BLOCKCOMMENT_STATE][LPAREN_CHAR] = BLOCKCOMMENT_STATE;
	mLegalMoves[BLOCKCOMMENT_STATE][RPAREN_CHAR] = BLOCKCOMMENT_STATE;
	mLegalMoves[BLOCKCOMMENT_STATE][LCURLY_CHAR] = BLOCKCOMMENT_STATE;
	mLegalMoves[BLOCKCOMMENT_STATE][EXPONENT_CHAR] = BLOCKCOMMENT_STATE;

	mLegalMoves[BLOCKCOMMENT_STATE][RCURLY_CHAR] = BLOCKCOMMENT_STATE;
	mLegalMoves[BLOCKCOMMENT_STATE][EXCLAMATION_CHAR] = BLOCKCOMMENT_STATE;
	mLegalMoves[BLOCKCOMMENT_STATE][NEWLINE_CHAR] = BLOCKCOMMENT_STATE;
	mLegalMoves[BLOCKCOMMENT_STATE][AMP_CHAR] = BLOCKCOMMENT_STATE;
	mLegalMoves[BLOCKCOMMENT_STATE][PIPE_CHAR] = BLOCKCOMMENT_STATE;
	mLegalMoves[BLOCKCOMMENT_STATE][MODULUS_CHAR] = BLOCKCOMMENT_STATE;
	mLegalMoves[BLOCKCOMMENT_STATE][TIMES_CHAR] = ENDBLOCKCOMMENT_STATE;

	mLegalMoves[ENDBLOCKCOMMENT_STATE][LETTER_CHAR] = BLOCKCOMMENT_STATE;
	mLegalMoves[ENDBLOCKCOMMENT_STATE][DIGIT_CHAR] = BLOCKCOMMENT_STATE;
	mLegalMoves[ENDBLOCKCOMMENT_STATE][WHITESPACE_CHAR] = BLOCKCOMMENT_STATE;
	mLegalMoves[ENDBLOCKCOMMENT_STATE][LESS_CHAR] = BLOCKCOMMENT_STATE;
	mLegalMoves[ENDBLOCKCOMMENT_STATE][EQUAL_CHAR] = BLOCKCOMMENT_STATE;
	mLegalMoves[ENDBLOCKCOMMENT_STATE][GREATER_CHAR] = BLOCKCOMMENT_STATE;
	mLegalMoves[ENDBLOCKCOMMENT_STATE][PLUS_CHAR] = BLOCKCOMMENT_STATE;
	mLegalMoves[ENDBLOCKCOMMENT_STATE][MINUS_CHAR] = BLOCKCOMMENT_STATE;
	mLegalMoves[ENDBLOCKCOMMENT_STATE][SEMICOLON_CHAR] = BLOCKCOMMENT_STATE;
	mLegalMoves[ENDBLOCKCOMMENT_STATE][LPAREN_CHAR] = BLOCKCOMMENT_STATE;
	mLegalMoves[ENDBLOCKCOMMENT_STATE][RPAREN_CHAR] = BLOCKCOMMENT_STATE;
	mLegalMoves[ENDBLOCKCOMMENT_STATE][LCURLY_CHAR] = BLOCKCOMMENT_STATE;
	mLegalMoves[ENDBLOCKCOMMENT_STATE][RCURLY_CHAR] = BLOCKCOMMENT_STATE;
	mLegalMoves[ENDBLOCKCOMMENT_STATE][EXPONENT_CHAR] = BLOCKCOMMENT_STATE;
	mLegalMoves[ENDBLOCKCOMMENT_STATE][EXCLAMATION_CHAR] = BLOCKCOMMENT_STATE;
	mLegalMoves[ENDBLOCKCOMMENT_STATE][NEWLINE_CHAR] = BLOCKCOMMENT_STATE;
	mLegalMoves[ENDBLOCKCOMMENT_STATE][AMP_CHAR] = BLOCKCOMMENT_STATE;
	mLegalMoves[ENDBLOCKCOMMENT_STATE][PIPE_CHAR] = BLOCKCOMMENT_STATE;
	mLegalMoves[ENDBLOCKCOMMENT_STATE][MODULUS_CHAR] = BLOCKCOMMENT_STATE;
	//only input to spin on endblock
	mLegalMoves[ENDBLOCKCOMMENT_STATE][TIMES_CHAR] = ENDBLOCKCOMMENT_STATE;
	mLegalMoves[ENDBLOCKCOMMENT_STATE][DIVIDE_CHAR] = START_STATE;

	mLegalMoves[DIVIDE_STATE][DIVIDE_CHAR] = COMMENT_STATE;
	mLegalMoves[COMMENT_STATE][LETTER_CHAR] = COMMENT_STATE;
	mLegalMoves[COMMENT_STATE][DIGIT_CHAR] = COMMENT_STATE;
	mLegalMoves[COMMENT_STATE][WHITESPACE_CHAR] = COMMENT_STATE;
	mLegalMoves[COMMENT_STATE][LESS_CHAR] = COMMENT_STATE;
	mLegalMoves[COMMENT_STATE][EQUAL_CHAR] = COMMENT_STATE;
	mLegalMoves[COMMENT_STATE][GREATER_CHAR] = COMMENT_STATE;
	mLegalMoves[COMMENT_STATE][PLUS_CHAR] = COMMENT_STATE;
	mLegalMoves[COMMENT_STATE][MINUS_CHAR] = COMMENT_STATE;
	mLegalMoves[COMMENT_STATE][DIVIDE_CHAR] = COMMENT_STATE;
	mLegalMoves[COMMENT_STATE][SEMICOLON_CHAR] = COMMENT_STATE;
	mLegalMoves[COMMENT_STATE][LPAREN_CHAR] = COMMENT_STATE;
	mLegalMoves[COMMENT_STATE][RPAREN_CHAR] = COMMENT_STATE;
	mLegalMoves[COMMENT_STATE][LCURLY_CHAR] = COMMENT_STATE;
	mLegalMoves[COMMENT_STATE][EXPONENT_CHAR] = COMMENT_STATE;
	mLegalMoves[COMMENT_STATE][RCURLY_CHAR] = COMMENT_STATE;
	mLegalMoves[COMMENT_STATE][AMP_CHAR] = COMMENT_STATE;
	mLegalMoves[COMMENT_STATE][PIPE_CHAR] = COMMENT_STATE;
	mLegalMoves[COMMENT_STATE][MODULUS_CHAR] = COMMENT_STATE;
	mLegalMoves[COMMENT_STATE][EXCLAMATION_CHAR] = COMMENT_STATE;
	mLegalMoves[COMMENT_STATE][TIMES_CHAR] = COMMENT_STATE;
	mLegalMoves[COMMENT_STATE][NEWLINE_CHAR] = START_STATE;
	mLegalMoves[COMMENT_STATE][ENDFILE_CHAR] = ENDFILE_STATE;


	//mLegalMoves[INTEGER_STATE][LESS_CHAR] = CANTMOVE_STATE;
	for (int i = 0; i<LAST_STATE; i++)
	{
		mCorrespondingTokenTypes[i] = BAD_TOKEN;
	}
	mCorrespondingTokenTypes[IDENTIFIER_STATE] = IDENTIFIER_TOKEN;
	mCorrespondingTokenTypes[INTEGER_STATE] = INTEGER_TOKEN;
	mCorrespondingTokenTypes[LESS_STATE] = LESS_TOKEN;
	mCorrespondingTokenTypes[LESSEQUAL_STATE] = LESSEQUAL_TOKEN;
	mCorrespondingTokenTypes[INSERTION_STATE] = INSERTION_TOKEN;
	mCorrespondingTokenTypes[ASSIGNMENT_STATE] = ASSIGNMENT_TOKEN;
	mCorrespondingTokenTypes[EQUAL_STATE] = EQUAL_TOKEN;
	mCorrespondingTokenTypes[NOT_STATE] = NOT_TOKEN;
	mCorrespondingTokenTypes[NOTEQUAL_STATE] = NOTEQUAL_TOKEN;
	mCorrespondingTokenTypes[PLUS_STATE] = PLUS_TOKEN;
	mCorrespondingTokenTypes[PLUSEQUAL_STATE] = PLUSEQUAL_TOKEN;
	mCorrespondingTokenTypes[MINUS_STATE] = MINUS_TOKEN;
	mCorrespondingTokenTypes[MINUSEQUAL_STATE] = MINUSEQUAL_TOKEN;
	mCorrespondingTokenTypes[GREATER_STATE] = GREATER_TOKEN;
	mCorrespondingTokenTypes[GREATEREQUAL_STATE] = GREATEREQUAL_TOKEN;
	mCorrespondingTokenTypes[TIMES_STATE] = TIMES_TOKEN;
	mCorrespondingTokenTypes[TIMESEQUAL_STATE] = TIMESEQUAL_TOKEN;
	mCorrespondingTokenTypes[DIVIDE_STATE] = DIVIDE_TOKEN;
	mCorrespondingTokenTypes[DIVIDEEQUAL_STATE] = DIVIDEEQUAL_TOKEN;
	mCorrespondingTokenTypes[LPAREN_STATE] = LPAREN_TOKEN;
	mCorrespondingTokenTypes[RPAREN_STATE] = RPAREN_TOKEN;
	mCorrespondingTokenTypes[LCURLY_STATE] = LCURLY_TOKEN;
	mCorrespondingTokenTypes[RCURLY_STATE] = RCURLY_TOKEN;
	mCorrespondingTokenTypes[EXPONENT_STATE] = EXPONENT_TOKEN;
	mCorrespondingTokenTypes[MODULUS_STATE] = MODULUS_TOKEN;
	mCorrespondingTokenTypes[SEMICOLON_STATE] = SEMICOLON_TOKEN;
	mCorrespondingTokenTypes[AND_STATE] = AND_TOKEN;
	mCorrespondingTokenTypes[OR_STATE] = OR_TOKEN;
	mCorrespondingTokenTypes[STRING_STATE] = STRING_TOKEN;
	mCorrespondingTokenTypes[INC_STATE] = INC_TOKEN;
	mCorrespondingTokenTypes[DEC_STATE] = DEC_TOKEN;
	mCorrespondingTokenTypes[ENDFILE_STATE] = ENDFILE_TOKEN;
}

MachineState StateMachine::UpdateState(char currentCharacter, TokenType &correspondingTokenType) {
	CharacterType charType = BAD_CHAR;
	if (isalpha(currentCharacter)) { charType = LETTER_CHAR; }
	if (isdigit(currentCharacter)) { charType = DIGIT_CHAR; }
	if (isspace(currentCharacter)) { if (currentCharacter != '\n') { charType = WHITESPACE_CHAR; } }
	if (currentCharacter == '<') { charType = LESS_CHAR; }
	if (currentCharacter == '_') { charType = UNDER_CHAR; }
	if (currentCharacter == '=') { charType = EQUAL_CHAR; }
	if (currentCharacter == '>') { charType = GREATER_CHAR; }
	if (currentCharacter == '+') { charType = PLUS_CHAR; }
	if (currentCharacter == '-') { charType = MINUS_CHAR; }
	if (currentCharacter == '^') { charType = EXPONENT_CHAR; }
	 if (currentCharacter == '*') { charType = TIMES_CHAR; }
	 if (currentCharacter == '/') { charType = DIVIDE_CHAR; }
	 if (currentCharacter == ';') { charType = SEMICOLON_CHAR; }
	 if (currentCharacter == '(') { charType = LPAREN_CHAR; }
	 if (currentCharacter == ')') { charType = RPAREN_CHAR; }
	 if (currentCharacter == '{') { charType = LCURLY_CHAR; }
	 if (currentCharacter == '}') { charType = RCURLY_CHAR; }
	 if (currentCharacter == '!') { charType = EXCLAMATION_CHAR; }
	 if (currentCharacter == '\n') { charType = NEWLINE_CHAR; }
	 if (currentCharacter == '&') { charType = AMP_CHAR; }
	 if (currentCharacter == '%') { charType = MODULUS_CHAR; }
	 if (currentCharacter == '|') { charType = PIPE_CHAR; }
	 if (currentCharacter == '"') { charType = STRING_CHAR; }
	 if (currentCharacter == EOF) { charType = ENDFILE_CHAR; }
	correspondingTokenType = mCorrespondingTokenTypes[mCurrentState];
	mCurrentState = mLegalMoves[mCurrentState][charType];
	return mCurrentState;

}